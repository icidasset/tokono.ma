module Markdown exposing (..)

import Parser exposing (..)
import Parser.Extra exposing (..)


parse string =
    Parser.run parser string


parser =
    loop [] blocksParser



-- BLOCKS


type Block
    = BlockQuote (Array Block)
    | Heading
        { level : Int
        }
        (Array Inline)
    | Paragraph (Array Inline)


blocksParser : Array Block -> Parser (Step (Array Block) (Array Block))
blocksParser blocks =
    let
        block p =
            succeed
                (\b ->
                    blocks
                        |> Array.pushLast b
                        |> Loop
                )
                |= p

        -- Check if we reached the end of the document
        theEnd =
            map (\_ -> Done blocks) (succeed identity |. spaces |. end)
    in
    Parser.oneOf
        [ theEnd
        , block blockParser
        ]


blockParser : Parser Block
blockParser =
    Parser.oneOf
        [ blockQuoteParser
        , headingParser
        , paragraphParser
        ]


blockDeliminator =
    oneOf
        [ chompIf (\c -> c == '\n') |. chompIf (\c -> c == '\n') |. spaces
        , end
        ]


blockQuoteParser : Parser Block
blockQuoteParser =
    succeed identity
        |. notMoreThanXSpaces 3
        |. oneOf
                [ symbol ">"
                , symbol "> "
                ]
        |= getChompedString (chompUntilEndOr "\n\n")
        |. blockDeliminator
        |> andThen
                (\string ->
                    let
                        lines =
                            String.split "\n" string

                        isProperlyFormatted =
                            Array.any
                                (\line ->
                                    case String.split ">" line of
                                        [ prefix, _ ] ->
                                            String.length prefix <= 3

                                        _ ->
                                            True
                                )
                                lines
                    in
                    if isProperlyFormatted then
                        lines
                            |> Array.map
                                    (\line ->
                                        case String.split ">" line of
                                            [ prefix, suffix ] ->
                                                suffix
                                                    |> String.trimLeft
                                                    |> parse
                                                    |> Result.withDefault []

                                            [ suffix ] ->
                                                suffix
                                                    |> String.trimLeft
                                                    |> parse
                                                    |> Result.withDefault []

                                            _ ->
                                                []
                                    )
                            |> Array.flatten
                            |> BlockQuote
                            |> succeed
                    else
                        problem "Improperly formatted blockquote"
                )
        |> backtrackable


headingParser : Parser Block
headingParser =
    some (symbol "#")
        |> getChompedString
        |> map String.length
        |> andThen
                (\level ->
                    if level > 6 then
                        problem "Headers only go up to 6"
                    else
                        succeed
                            (Heading
                                { level = level
                                }
                            )
                            |. some (chompIf isSpace)
                            |= loop [] inlineParser
                            |. blockDeliminator
                )
        |> backtrackable


paragraphParser : Parser Block
paragraphParser =
    succeed Paragraph |= loop [] inlineParser |. blockDeliminator



-- INLINE


type Inline
    = Image
        { alt : String
        , url : String
        }
    | Link
        { text : String
        , url : String
        }
    | Text String


inlineParser : Array Inline -> Parser (Step (Array Inline) (Array Inline))
inlineParser inlineElements =
    let
        inline =
            map
                (\el ->
                    inlineElements
                        |> Array.pushLast el
                        |> Loop
                )
    in
    Parser.oneOf
        [ inline imageParser
        , inline linkParser

        , --
          oneOf
            [ succeed
                (\text ->
                    case text of
                        "" ->
                            Done inlineElements

                        _ ->
                            inlineElements
                                |> Array.pushLast (Text text)
                                |> Loop
                )
                |= getChompedString (chompWhile (\c -> c /= '!' && c /= '[' && c /= '\n' && c /= '\r'))
                |> backtrackable

            , --
              succeed
                (\text ->
                    inlineElements
                        |> Array.pushLast (Text text)
                        |> Done
                )
                |= getChompedString (chompUntilEndOr "\n\n")
                |> backtrackable
            ]
        ]


imageParser : Parser Inline
imageParser =
    succeed identity
        |. symbol "!["
        |= getChompedString (chompUntil "]")
        |. symbol "]"
        |> andThen
                (\alt ->
                    -- TODO: Support image titles
                    succeed identity
                        |. symbol "("
                        |= getChompedString (chompUntil ")")
                        |. symbol ")"
                        |> map
                                (\url ->
                                    Image
                                        { alt = alt
                                        , url = url
                                        }
                                )
                )
        |> backtrackable


linkParser : Parser Inline
linkParser =
    succeed identity
        |. symbol "["
        |= getChompedString (chompUntil "]")
        |. symbol "]"
        |> andThen
                (\text ->
                    -- TODO: Support link titles
                    succeed identity
                        |. symbol "("
                        |= getChompedString (chompUntil ")")
                        |. symbol ")"
                        |> map
                                (\url ->
                                    Link
                                        { text = text
                                        , url = url
                                        }
                                )
                )
        |> backtrackable
