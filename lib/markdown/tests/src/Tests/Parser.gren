module Tests.Parser exposing ( tests )

{-|

These tests match the code presented in the spec:
https://spec.commonmark.org/0.30/#inlines

The tests should be in the same order as in the spec.

-}

import Expect
import Markdown
import Markdown.Block exposing ( Block(..) )
import Markdown.Inline exposing ( Inline(..) )
import Markdown.Parser.Inlines as Inlines
import Test exposing (..)



-- TESTS


tests =
    Test.concat
        [ inlines
        ]



-- BLOCKS


singleParagraph =
    test "parsing solely one paragraph"
        <| (\_ ->
                Expect.equal
                    ("Paragraph"
                        |> Markdown.parse
                                { frontmatter = Nothing
                                }
                        |> .blocks
                    )
                    [ Paragraph
                        [ Text "Paragraph"
                        ]
                    ]
            )



-- INLINES  /  🛠️


testInline string expectedResult =
    testInlines
        string
        [ expectedResult
        ]


testInlines string expectedResult =
    test
        string
        (\_ ->
            string
                |> Inlines.parse
                |> Expect.equal (Ok expectedResult)
        )



-- INLINES  /  TESTS


inlines =
    Test.concat
        [ codeSpan
        , emphasis
        ]


codeSpan =
    describe
        "Code spans"
        [ testInline "`foo`" (InlineCode "foo")
        , testInline "`` foo ` bar ``" (InlineCode "foo ` bar")
        , testInline "` `` `" (InlineCode "``")
        , testInline "`  ``  `" (InlineCode " `` ")
        , testInline "` a`" (InlineCode " a")
        , testInline "`\u{00A0}b\u{00A0}`" (InlineCode "\u{00A0}b\u{00A0}")
        , testInline "` `" (InlineCode " ")
        , testInline "`  `" (InlineCode "  ")

        , --
          testInline
            """
            ``
            foo
            bar\u{0020}\u{0020}
            baz
            ``
            """
            (InlineCode "foo bar   baz")
        , testInline
            """
            ``
            foo\u{0020}
            ``
            """
            (InlineCode "foo ")
        , testInline
            """
            `foo   bar\u{0020}
            baz`
            """
            (InlineCode "foo   bar  baz")
        , testInlines
            "`foo\\`bar`"
            [ InlineCode "foo\\"
            , Text "bar`"
            ]

        , --
          testInline "``foo`bar``" (InlineCode "foo`bar")
        , testInline "` foo `` bar `" (InlineCode "foo `` bar")

        , --
          testInlines
            "*foo`*`"
            [ Text "*foo"
            , InlineCode "*"
            ]
        , testInlines
            "[not a `link](/foo`)"
            [ Text "[not a "
            , InlineCode "link](/foo"
            , Text ")"
            ]

        , -- TODO: Still need to implement HTML parsing.
          --       Some `Inline` elements may need to be replaced by a `Html` inline element here.
          skip (testInline "`<a href=\"`\">`" (InlineCode "<a href=\"`\">"))
        , skip (testInline "<a href=\"`\">`" (Text "<a href=\"`\">`"))

        , -- TODO: Still need to implement autolinks.
          --       Some `Inline` elements may need to be replaced by a `AutoLink` inline element here.
          skip (testInline "`<http://foo.bar.`baz>`" (InlineCode "<http://foo.bar.`baz>"))
        , skip (testInline "<http://foo.bar.`baz>`\'" (Text "<a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`"))

        , --
          testInline "```foo``" (Text "```foo``")
        , testInline "`foo" (Text "`foo")

        , --
          testInlines
            "`foo``bar``"
            [ Text "`foo"
            , InlineCode "bar"
            ]
        ]


emphasis =
  only
  <|  describe
        "Emphasis and strong emphasis"
        [ testInline
            "*foo bar*"
            (Emphasis
                { times = 1
                }
                [ Text "foo bar"
                ]
            )

        , --
          testInline "a * foo bar*" (Text "a * foo bar*")
        , testInline "a*\"foo\"*" (Text "a*\"foo\"*")
        , testInline "*\u{00A0}a\u{00A0}*" (Text "*\u{00A0}a\u{00A0}*")

        , --
          testInlines
            "foo*bar*"
            [ Text "foo"
            , Emphasis
                { times = 1
                }
                [ Text "bar"
                ]
            ]
        , testInlines
            "5*6*78"
            [ Text "5"
            , Emphasis
                { times = 1
                }
                [ Text "6"
                ]
            , Text "78"
            ]

        , --
          testInline
            "_foo bar_"
            (Emphasis
                { times = 1
                }
                [ Text "foo bar"
                ]
            )

        , --
          testInline "_ foo bar_" (Text "_ foo bar_")
        , testInline "foo_bar_" (Text "foo_bar_")
        , testInline "5_6_78" (Text "5_6_78")
        , testInline "пристаням_стремятся_" (Text "пристаням_стремятся_")
        , testInline "aa_\"bb\"_cc" (Text "aa_\"bb\"_cc")

        , --
          testInlines
            "foo-_(bar)_"
            [ Text "foo-"
            , Emphasis
                { times = 1
                }
                [ Text "(bar)"
                ]
            ]

        , --
          testInline "_foo*" (Text "_foo*")
        , testInline "*foo bar *" (Text "*foo bar *")

        , --
          testInline
            """
            *foo bar
            *
            """
            (Text "*foo bar\n*")

        , --
          testInline "*(*foo)" (Text "*(*foo)")

        , --
          testInline
                    "*(*foo*)*"
                    (Emphasis
                        { times = 1
                        }
                        [ Text "("
                        , Emphasis
                            { times = 1
                            }
                            [ Text "foo"
                            ]
                        , Text ")"
                        ]
                    )
        ]
