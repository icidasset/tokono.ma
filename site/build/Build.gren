module Build exposing ( main )

import Bytes exposing ( Bytes )
import Bytes.Encode
import Common.Html exposing ( Html )
import Dict
import Pages.Index
import Shikensu
import Shikensu.Bundle as Shikensu
import Shikensu.Contrib as Shikensu
import Shikensu.Definition as Shikensu
import Shikensu.Error exposing(Error)
import Shikensu.Focus as Shikensu exposing ( Focus(..) )
import Shikensu.Path as Path
import Stream
import Task exposing(Task)
import FileSystem



-- 🏔️


pages =
    [ page [] Pages.Index.html
    , page
        [ "work"
        ]
        Pages.Index.html
    ]


destination : Shikensu.Focus
destination =
    Relative
        (Path.directory
            [ "build"
            ]
        )



-- 🚀


main : Shikensu.Program
main =
    Shikensu.perform
        { onSuccess = \env _ -> Stream.sendLine env.stdout "🧪 Sequence completed"
        , onError = \env err -> Stream.sendLine env.stderr ("🚨 " ++ Shikensu.Error.toString err)
        }
        sequence


sequence : FileSystem.Permission -> Task Error (Array {})
sequence =
    writePagesToDisk


writePagesToDisk : FileSystem.Permission -> Task Error (Array {})
writePagesToDisk fsPermission =
    fsPermission
        |> Shikensu.currentWorkingDirectory
        -- Destination directory: `./dist/`
        |> Task.map (Path.map (Array.pushLast "dist"))
        -- Write each page to disk
        |> Task.andThen
                (\destinationDir ->
                    pages
                        |> Array.map (Shikensu.writeDefinition fsPermission destinationDir)
                        |> Task.sequence
                )



-- 🛠️


htmlBytes : Html msg -> Bytes
htmlBytes =
    Common.Html.toString >> Bytes.Encode.string >> Bytes.Encode.encode


page directoryPath html =
    { baseName = "index"
    , content = Just (htmlBytes html)
    , directoryPath = Path.directory directoryPath
    , extensionName = Just "html"
    , metadata = Dict.empty
    }
