module Common.VirtualDom exposing ( fromHtml )

import Common.Html.Interior exposing (..)
import Json.Encode
import VirtualDom


fromHtml : Html msg -> VirtualDom.Node msg
fromHtml =
    transform
        { node =
            \{ key, tagName } attributes { namespace } ->
                let
                    handledAttributes =
                        Array.map handleAttribute attributes
                in
                case namespace of
                    Just ns ->
                        case key of
                            Just k ->
                                \nodes ->
                                    VirtualDom.keyedNodeNS
                                        ns
                                        tagName
                                        handledAttributes
                                        (Array.map
                                            (\node ->
                                                { key = k
                                                , node = node
                                                }
                                            )
                                            nodes
                                        )

                            Nothing ->
                                VirtualDom.nodeNS ns tagName handledAttributes

                    Nothing ->
                        case key of
                            Just k ->
                                \nodes ->
                                    VirtualDom.keyedNode
                                        tagName
                                        handledAttributes
                                        (Array.map
                                            (\node ->
                                                { key = k
                                                , node = node
                                                }
                                            )
                                            nodes
                                        )

                            Nothing ->
                                VirtualDom.node tagName handledAttributes
        , injectDescendants = \parentNodeResult childNodeResults -> parentNodeResult childNodeResults
        , text = VirtualDom.text
        }


handleAttribute attr =
    case attr of
        Attribute key value ->
            VirtualDom.attribute key value

        BoolProperty key value ->
            VirtualDom.property key (Json.Encode.bool value)

        Event name (Normal decoder) ->
            VirtualDom.on name (VirtualDom.Normal decoder)

        Event name (MayStopPropagation decoder) ->
            VirtualDom.on name (VirtualDom.MayStopPropagation decoder)

        Event name (MayPreventDefault decoder) ->
            VirtualDom.on name (VirtualDom.MayPreventDefault decoder)

        Event name (Custom decoder) ->
            VirtualDom.on name (VirtualDom.Custom decoder)

        StringProperty key value ->
            VirtualDom.property key (Json.Encode.string value)

        Style key value ->
            VirtualDom.style key value

        ValueProperty key value ->
            VirtualDom.property key value
