module Main exposing ( main )

import Browser exposing ( UrlRequest(..) )
import Browser.Navigation
import Common.String as String
import Markdown
import Messages as ViewMsg
import Types exposing (..)
import Url exposing ( Url )
import View exposing ( view )



-- ⛩️


type alias Flags =
    { pageRoute : Array String
    }


main : Program Flags Model Msg
main =
    Browser.application
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        , onUrlRequest = UrlRequested
        , onUrlChange = UrlChanged
        }



-- 🌳


init :
    Flags
    -> Url
    -> Browser.Navigation.Key
    -> { model : Model
       , command : Cmd Msg
       }
init flags url key =
    let
        parsed =
            Markdown.parse
                """
                ## H2 [link](#href)

                # H1 ``code``

                Testing a [link](#href). Some more text.

                > Blockquote with a [link](#href).

                Paragraph 2.
                """

        _ =
            Debug.log "" parsed

        rootUrl =
            url.path
                |> String.removePrefix "/"
                |> String.removeSuffix "/"
                |> String.split "/"
                |> Array.dropLast (Array.length flags.pageRoute)
                |> (\path ->
                        case path of
                            [] ->
                                ""

                            [ "" ] ->
                                ""

                            _ ->
                                "/" ++ String.join "/" path ++ "/"
                    )
                |> (\path -> { url | path = path })
    in
    { model =
        { navKey = key
        , rootUrl = rootUrl
        , url = url
        }
    , command = Cmd.none
    }



-- 📣


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case msg of
        ViewMsg (ViewMsg.NavigateToPage page) ->
            let
                url =
                    "/" ++ model.rootUrl.path ++ String.join "/" page.route ++ "/"
            in
            { model = model
            , command = Browser.Navigation.pushUrl model.navKey url
            }

        -- NAVIGATION
        UrlChanged url ->
            { model = { model | url = url }
            , command = Cmd.none
            }

        UrlRequested (External string) ->
            { model = model
            , command = Browser.Navigation.load string
            }

        UrlRequested (Internal url) ->
            { model = model
            , command = Browser.Navigation.pushUrl model.navKey (Url.toString url)
            }



-- 📰


subscriptions model =
    Sub.none
