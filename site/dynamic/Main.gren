module Main exposing ( main )

import Browser exposing ( UrlRequest(..) )
import Browser.Navigation
import Messages as ViewMsg
import Types exposing (..)
import Url exposing ( Url )
import View exposing ( view )



-- ⛩️


type alias Flags =
    {}


main : Program Flags Model Msg
main =
    Browser.application
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        , onUrlRequest = UrlRequested
        , onUrlChange = UrlChanged
        }



-- 🌳


init :
    Flags
    -> Url
    -> Browser.Navigation.Key
    -> { model : Model
       , command : Cmd Msg
       }
init flags url key =
    { model =
        { navKey = key
        , url = url
        }
    , command = Cmd.none
    }



-- 📣


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case msg of
        ViewMsg (ViewMsg.NavigateToPage page) ->
            let
                url =
                    "/" ++ String.join "/" page.route
            in
            { model = model
            , command = Browser.Navigation.pushUrl model.navKey url
            }

        -- NAVIGATION
        UrlChanged url ->
            { model = { model | url = url }
            , command = Cmd.none
            }

        UrlRequested (External string) ->
            { model = model
            , command = Browser.Navigation.load string
            }

        UrlRequested (Internal url) ->
            { model = model
            , command = Browser.Navigation.pushUrl model.navKey (Url.toString url)
            }



-- 📰


subscriptions model =
    Sub.none
