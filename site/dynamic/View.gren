module View exposing (..)

import Browser exposing ( Document )
import Dict
import Layouts.Markdown
import Markdown
import Pages
import String.Extra as String
import Transmutable.Html
import Transmutable.Html.VirtualDom
import Types exposing ( Model, Msg(..) )
import Views.Pages


view : Model -> Document Msg
view model =
    let
        pageRoute =
            case
                model.url.path
                    |> String.removePrefix "/"
                    |> String.removeSuffix "/"
                    |> String.split "/"
            of
                [ "" ] ->
                    []

                r ->
                    r

        viewOpts =
            { essayTableOfContents = model.essayTableOfContents
            }

        maybe =
            case pageRoute of
                [ "essays", baseName ] ->
                    model.essays
                        |> Dict.get baseName
                        |> Maybe.map
                                (\{ metadata, blocks } ->
                                    let
                                        p =
                                            Pages.essay
                                                { baseName = baseName
                                                , title = metadata.title
                                                }
                                    in
                                    { page = p
                                    , view =
                                        blocks
                                            |> Array.map Markdown.toHtml
                                            |> Layouts.Markdown.layout p "essays"
                                    }
                                )

                _ ->
                    Pages.allPages
                        |> Array.findFirst (\{ route } -> route == pageRoute)
                        |> Maybe.map
                                (\p ->
                                    { page = p
                                    , view = Views.Pages.view viewOpts p
                                    }
                                )

        result =
            case maybe of
                Just a ->
                    { page = a.page
                    , view = a.view
                    }

                Nothing ->
                    { page = Pages.notFound
                    , view = Views.Pages.view viewOpts Pages.notFound
                    }
    in
    { title = result.page.title
    , body =
        result.view
            |> Array.map (Transmutable.Html.map ViewMsg)
            |> Array.map Transmutable.Html.VirtualDom.toVirtualDom
    }
