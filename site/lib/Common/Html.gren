module Common.Html exposing ( Html, Attribute, text, node, toString, toStringWithIndent )

{-| This file is organized roughly in order of popularity. The tags which you'd
expect to use frequently will be closer to the top.

# Primitives
@docs Html, Attribute, text, node

-}

import Common.Html.Internal.String
import Common.Html.Interior as Interior



-- CORE TYPES


{-| The core building block used to build up HTML. Here we create an `Html`
value with no attributes and one child:

    hello : Html msg
    hello =
      div [] [ text "Hello!" ]
-}
type alias Html msg =
    Interior.Html msg


{-| Set attributes on your `Html`. Learn more in the
[`Html.Attributes`](Html-Attributes) module.
-}
type alias Attribute msg =
    Interior.Attribute msg



-- PRIMITIVES


{-| General way to create HTML nodes. It is used to define all of the helper
functions in this library.

    div : Array (Attribute msg) -> Array (Html msg) -> Html msg
    div attributes children =
        node "div" attributes children

You can use this to create custom nodes if you need to create something that
is not covered by the helper functions in this library.
-}
node : String -> Array (Attribute msg) -> Array (Html msg) -> Html msg
node tagName attributes children =
    Interior.Node tagName attributes (Interior.Regular children)


{-| Just put plain text in the DOM. It will escape the string so that it appears
exactly as you specify.

    text "Hello World!"

-}
text : String -> Html msg
text =
    Interior.TextNode



-- TRANSFORMATIONS


toString : Html msg -> String
toString =
    Common.Html.Internal.String.toString
        { indent = 0
        }


toStringWithIndent : Int -> Html msg -> String
toStringWithIndent indent =
    Common.Html.Internal.String.toString
        { indent = indent
        }
