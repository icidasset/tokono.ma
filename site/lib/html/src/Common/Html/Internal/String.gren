module Common.Html.Internal.String exposing ( toString )

import Common.Html.Interior exposing (..)
import Json.Encode


toString :
    { indent : Int
    }
    -> Html msg
    -> String
toString options html =
    toString_
        { indent = options.indent
        , level = 0
        }
        [ html
        ]


toString_ :
    { indent : Int
    , level : Int
    }
    -> Array (Html msg)
    -> String
toString_ options =
    Array.foldl
        (\node acc ->
            let
                string =
                    case node of
                        Node tagName attributes children ->
                            case children of
                                Regular [] ->
                                    tag
                                        tagName
                                        attributes
                                        { isClosed = True
                                        }

                                Regular nodes ->
                                    tag
                                        tagName
                                        attributes
                                        { isClosed = False
                                        }
                                        ++ toString_ { options | level = options.level + 1 } nodes
                                        ++ closingTag tagName

                        TextNode text ->
                            escapeText text
            in
            acc ++ string
        )
        ""



-- UTILS


attributesToString : Array (Attribute msg) -> Array String
attributesToString attrs =
    let
        collect attr acc =
            case attr of
                Attribute "class" value ->
                    { acc | classes = Array.pushLast value acc.classes }

                Attribute key value ->
                    { acc | rest = Array.pushLast (buildProp key value) acc.rest }

                BoolProperty string isEnabled ->
                    if isEnabled then
                        { acc | rest = Array.pushLast (hyphenate (propName string)) acc.rest }
                    else
                        acc

                StringProperty key value ->
                    collect (Attribute (propName key) value) acc

                Style key value ->
                    { acc | styles = Array.pushLast (escapeAttributePart key ++ ": " ++ escapeAttributePart value) acc.styles }

                ValueProperty key value ->
                    { acc | rest = Array.pushLast (buildProp (propName key) (Json.Encode.encode 0 value)) acc.rest }
    in
    attrs
        |> Array.foldl
                collect
                { classes = []
                , rest = []
                , styles = []
                }
        |> (\acc ->
                if Array.isEmpty acc.classes then
                    { styles = acc.styles
                    , rest = acc.rest
                    }
                else
                    acc.classes
                        |> String.join " "
                        |> (\val ->
                                { styles = acc.styles
                                , rest = Array.pushFirst (buildProp "class" val) acc.rest
                                }
                            )
            )
        |> (\acc ->
                if Array.isEmpty acc.styles then
                    acc.rest
                else
                    acc.styles
                        |> String.join "; "
                        |> (\val -> Array.pushFirst (buildProp "style" val) acc.rest)
            )


buildProp : String -> String -> String
buildProp key value =
    hyphenate key ++ "=\"" ++ escapeAttributePart value ++ "\""


closingTag : String -> String
closingTag tagName =
    "</" ++ tagName ++ ">"


escapeAttributePart : String -> String
escapeAttributePart =
    String.foldl
        (\char acc ->
            if char == '\"' then
                acc ++ "\\\""
            else
                acc ++ String.fromChar char
        )
        ""


escapeText : String -> String
escapeText =
    String.replace "&" "&amp;" >> String.replace "<" "&lt;" >> String.replace ">" "&gt;"


hyphenate : String -> String
hyphenate =
    String.foldl
        (\char acc ->
            if Char.isUpper char then
                acc ++ "-" ++ String.fromChar (Char.toLower char)
            else
                acc ++ String.fromChar char
        )
        ""


propName : String -> String
propName prop =
    case prop of
        "className" ->
            "class"

        "defaultValue" ->
            "value"

        "htmlFor" ->
            "for"

        _ ->
            prop


tag :
    String
    -> Array (Attribute msg)
    -> { isClosed : Bool
       }
    -> String
tag tagName attributes { isClosed } =
    let
        lowercaseTagName =
            String.toLower tagName
    in
    String.append
        (case lowercaseTagName of
            "html" ->
                "<!DOCTYPE html>"

            _ ->
                ""
        )
        ("<"
            ++ String.join " " (Array.pushFirst tagName (attributesToString attributes))
            ++ (if isClosed then
                    case lowercaseTagName of
                        "script" ->
                            "></script>"

                        _ ->
                            " />"
                 else
                    ">"
                )
        )
