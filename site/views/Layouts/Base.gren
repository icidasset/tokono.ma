module Layouts.Base exposing ( layout )

import Json.Encode
import Pages exposing ( Page )
import Time
import Transmutable.Html as Html exposing ( Html )
import Transmutable.Html.Attributes as A
import Views.Common exposing ( Route )


layout : Page -> Time.Posix -> Array (Html msg) -> Array (Html msg)
layout page time pageHtml =
    let
        cacheId =
            time
                |> Time.posixToMillis
                |> String.fromInt
    in
    [ Html.doctype
    , Html.html
        [ A.lang "en"
        ]
        [ -- -------------------------------------
          -- HEAD
          -- -------------------------------------
          Html.head
            []
            [ Html.title
                [ Html.text page.title
                ]
            , Html.meta
                [ A.charset "utf-8"
                ]
            , Html.meta
                [ A.name "viewport"
                , A.content "width=device-width, initial-scale=1"
                ]
            , Html.meta
                [ A.name "description"
                , A.content "Steven Vandevelde\'s personal website üò∂‚Äçüå´Ô∏è"
                ]
            , Html.link
                [ let
                    emoji =
                        "ü™¥"
                  in
                  A.href ("data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>" ++ emoji ++ "</text></svg>")
                , A.rel "icon"
                ]
            , Html.link
                [ let
                    stylesheetHref =
                        "stylesheet.css?v=" ++ cacheId
                  in
                  case page.route of
                    [ "404" ] ->
                        A.href ("/" ++ stylesheetHref)

                    _ ->
                        A.href
                            (Views.Common.pathFromRoot
                                { root = page.route
                                }
                                [ stylesheetHref
                                ]
                            )
                , A.rel "stylesheet"
                ]
            ]
            -- ---------------------------------------
            -- BODY
            -- ---------------------------------------
        , [ Html.node
                "script"
                [ cacheId
                    |> String.append "site.js?v="
                    |> Array.singleton
                    |> Views.Common.pathFromRoot
                            { root = page.route
                            }
                    |> A.src
                ]
                []
          , Html.node
                "script"
                []
                [ Html.text "const pageRoute = "
                , Html.text (Json.Encode.encode 0 (Json.Encode.array Json.Encode.string page.route))
                , Html.text ";"

                , --
                  Html.text
                    """
                    const pathToRoot = pageRoute.length ? pageRoute.map(() => \'..\').join(\'/\') + \'/\': \'\';

                    async function init() {
                      const essays = await fetch(`${pathToRoot}essays.json`).then(r => r.json())
                      const notes = await fetch(`${pathToRoot}notes.json`).then(r => r.json())

                      Gren.Main.init({ flags: { essays, notes, pageRoute }})
                    }

                    init()
                    """
                ]
          ]
            |> Array.prefix pageHtml
            |> (\_ -> pageHtml)
            |> Html.body []
        ]
    ]
