module Views.Pages.Essays exposing ( view )

import Dict
import Layouts.Default
import Messages exposing ( Msg )
import Pages exposing ( TableOfContents )
import Transmutable.Html as Html exposing ( Html )
import Transmutable.Html.Attributes as A exposing ( class )
import Views.Common as Common


view : TableOfContents -> Array (Html Msg)
view essays =
    let
        { trues, falses } =
            Array.partition .archived essays

        archivedEssays =
            trues

        nonArchivedEssays =
            falses
    in
    Layouts.Default.layout
        Pages.essays
        [ class "decoration-accent-essays"
        ]
        [ Html.h1
            [ class "text-accent-essays"
            ]
            [ Html.text "A few articles  I\'ve written over the years, mostly code related."
            ]

        , -- List
          groupByYear nonArchivedEssays


        , -- Archive
        Html.h3
            []
            [ Html.text "Archive"
            ]
        , Html.p
            [ class "italic max-w-md text-sm"
            ]
            [ Html.text "Most of this code doesn\'t work anymore or the information is outdated. Keeping it here in case it is still relevant to someone."
            ]
        , groupByYear archivedEssays
            --
        , Common.closingEmoji "✍️"
        ]


groupByYear essays =
    essays
            |> Array.foldl
                    (\essay acc ->
                        let
                            year =
                                Maybe.withDefault "default" (Maybe.andThen (String.split "-" >> Array.last) essay.publishedOn)

                            arr =
                                Maybe.withDefault [] (Dict.get year acc)
                        in
                        Dict.insert year (Array.pushLast essay arr) acc
                    )
                    Dict.empty
            |> Dict.toArray
            |> Array.sortBy (.key >> String.toInt >> Maybe.withDefault 0)
            |> Array.reverse
            |> Array.map
                    (\{ key, value } ->
                        case key of
                            "default" ->
                                []

                            _ ->

                                Array.map
                                (\{ page } ->
                                  link
                                    (Html.small
                                      [ class "mr-2 opacity-60 text-xs" ]
                                      [ Html.text key ]
                                    )

                                    page
                                )
                                value
                    )
            |> Array.flatten
            |> Html.ul []


link prefix page =
    Html.li
        []
        [ prefix
        , Html.a
            [ A.href ("../" ++ String.join "/" page.route ++ "/")
            ]
            [ Html.text page.name
            ]
        ]
